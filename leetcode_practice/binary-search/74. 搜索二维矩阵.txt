74. 搜索二维矩阵
编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。
示例 1:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
输出: true
示例 2:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
输出: false

和240题思路相似，而且简单
class Solution:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if(len(matrix) == 0):
            return False;
        if(len(matrix[0]) == 0):
            return False;
        n = len(matrix[0])-1;
        m = len(matrix)-1;
        i,j = 0,n;
        while i>=0 and j>=0 and i<=m and j<=n:
            if matrix[i][j] == target:
                return True;
            elif matrix[i][j] < target:
                i+=1;
            else:
                left,right = 0,n;
                while left<=right:
                    mid = (left+right)//2;
                    if matrix[i][mid] == target:
                        return True;
                    elif matrix[i][mid] < target:
                        left = mid+1;
                    else:
                        right = mid-1;
                return False;
        return False;