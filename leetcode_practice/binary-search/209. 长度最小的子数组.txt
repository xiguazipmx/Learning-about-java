209. 长度最小的子数组
给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。

示例: 

输入: s = 7, nums = [2,3,1,2,4,3]
输出: 2
解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。
class Solution:
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        l,r =0,-1
        sub_sum =0
        length = len(nums)+1

        # 滑动窗口的循环条件是左边界<len
        while l<len(nums):
            # 保证数组下标不越界
            # 搞清楚逻辑，右边界是先+1，再+值；左边界是先-值，再+1。注意区分
            if sub_sum<s and r+1<len(nums):
                r+=1
                sub_sum += nums[r]
            else:
                sub_sum -= nums[l]
                l+=1
            if sub_sum >=s:
                length = min(length,r-l+1)
        if length == len(nums)+1:
            return 0
        return length