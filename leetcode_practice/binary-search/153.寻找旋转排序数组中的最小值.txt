153.寻找旋转排序数组中的最小值
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

请找出其中最小的元素。

你可以假设数组中不存在重复元素。

示例 1:

输入: [3,4,5,1,2]
输出: 1
示例 2:

输入: [4,5,6,7,0,1,2]
输出: 0

并没有使用二分查找，感觉二分查找界限比较麻烦
时间复杂度O(n)44ms
class Solution:
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        a = nums[0];
        for i in nums[1:]:
            if i > a:
                continue;
            else:
                return i;
        return a;
使用二分查找，比暴力搜算慢48ms，这就很尴尬
class Solution:
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        target = nums[0];
        left,right = 0,len(nums)-1;
        while left <= right:
            mid = (right+left)//2;
            if nums[mid] >= target:
                left = mid+1;
            else:
                target = nums[mid];
                right = mid-1;
        return target;