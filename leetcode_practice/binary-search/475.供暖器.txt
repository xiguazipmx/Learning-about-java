冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。

现在，给出位于一条水平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。

所以，你的输入将会是房屋和供暖器的位置。你将输出供暖器的最小加热半径。

说明:

给出的房屋和供暖器的数目是非负数且不会超过 25000。
给出的房屋和供暖器的位置均是非负数且不会超过10^9。
只要房屋位于供暖器的半径内(包括在边缘上)，它就可以得到供暖。
所有供暖器都遵循你的半径标准，加热的半径也一样。
示例 1:

输入: [1,2,3],[2]
输出: 1
解释: 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。
示例 2:

输入: [1,2,3,4],[1,4]
输出: 1
解释: 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。


这一题在二分查找简单题中好难哦，思考了好久，然后超出时间限制
翻看之前做的题目突然发现bisect这个函数
它就是查找到插入的位置并返回

思路：
houses中的每一个元素插入heaters中的位置，这个元素距离前后的最小距离，然后求出这些最小距离的最大距离
from bisect import bisect
class Solution:
    def findRadius(self, houses, heaters):
        """
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """
        heaters.sort()
        max_len,left,right = 0,0,0;
        for x in houses:
            index = bisect(heaters,x);
            left = abs(heaters[index-1]-x) if index-1>=0 else float('inf');
            right = abs(heaters[index]-x) if index < len(heaters) else float('inf');
            max_len = max(min(left,right),max_len);
        return max_len;