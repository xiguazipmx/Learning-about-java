863. 二叉树中所有距离为 K 的结点
给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。

返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。

 

示例 1：

输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2

输出：[7,4,1]

解释：
所求结点为与目标结点（值为 5）距离为 2 的结点，
值分别为 7，4，以及 1



注意，输入的 "root" 和 "target" 实际上是树上的结点。
上面的输入仅仅是对这些对象进行了序列化描述。

将其转化为无向图，然后再使用bfs查找
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from collections import defaultdict
class Solution:
    def distanceK(self, root, target, K):
        """
        :type root: TreeNode
        :type target: TreeNode
        :type K: int
        :rtype: List[int]
        """
        graph = defaultdict(list);
        def dfs(root):
            if root.left:
                graph[root.val].append(root.left.val);
                graph[root.left.val].append(root.val);
                dfs(root.left);
            if root.right:
                graph[root.val].append(root.right.val);
                graph[root.right.val].append(root.val);
                dfs(root.right);
        dfs(root);
        cur = [target.val];
        visited = set();
        visited.add(target.val);
        while K:
            next_level = [];
            for a in cur:
                for b in graph[a]:
                    if b not in visited:
                        next_level.append(b);
                        visited.add(b);
            cur = next_level;
            K -= 1;
        return cur;