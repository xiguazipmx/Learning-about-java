内部类
可以将一个类的定义放在另一个类的定义内部

10.1 创建内部类
如果想从外部类的非静态之外的任意位置创建某个内部类的对象，需要具体指明这个对象的类型：OuterClassName.InnerClassName

10.2 链接到外部类
设计模式
迭代器：
1.生成一个内部类对象时，内部对象会秘密捕获一个指向外部类对象的引用。
2.内部类对象（除static类）自动拥有对其外部类所有成员的访问权。

10.3 使用.this与.new
如果需要生成对外部类对象的引用，可以使用外部类的名字后面紧跟.this
如果想要告知某些其它对象去创建其某个内部类对象，外部类对象.new 内部类()

10.4 内部类与向上转型
内部类-某个接口的实现-能够完全不可见，并且不可用（无法访问）。所得到的只是指向基类或接口的引用，方便隐藏实现的细节。
客户端程序员通过内部类可以访问外部类的private/protected等的方法和域，直接无法访问，不能看到内部类的具体实现细节。

10.5 在方法和作用域内的内部类
在方法中
在作用域中

10.6 匿名内部类

10.8 为什么需要内部类
内部类继承自某个类或实现某个接口，内部类的代码操作创建它的外围类对象。所以可以认为内部类提供了某种进入外围类的窗口
每个内部类都能独立地继承自一个（接口的）实现，所以无论外部类是否已经继承了某个接口，对内部类都没有影响
内部类使得多重继承的解决方案变得完整。内部类允许继承多个非接口类型
1）内部类可以有多个实例，每个实例有自己的状态信息，并且与其外部类对象的信息相互独立
2）在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或继承同一个类。
3）创建内部类对象不需要依赖外部类对象的创建
4）内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体
10.8.1 闭包与回调
闭包（closure）：是一个可调用的对象，它记录一些信息，这些信息来自于创建它的作用域。
内部类是面向对象的闭包。内部类包含外部类的对象，创建内部类的作用域，还拥有一个指向外部类对象的引用，在此作用域内，内部类有权操作所有的成员，包括private成员。
10.8.2 内部类与控制框架


10.9 内部类的继承
因为内部类的构造器必须连接到指定其外围类对象的引用。
要用特殊的语法指向内部类的引用而不是指向外围对象的引用。使用外围类.super()

10.10 内部类可以被覆盖吗
当继承某个外部类的时候，内部类并没有发生什么特别神奇的变化。这两个内部类完全是独立的两个实体，各自在自己的命名空间内。

10.11 局部内部类
局部内部类不能有访问说明符，因为她不是外围类的一部分，但是它可以访问当前代码块内的常量，以及此外围类的所有成员。
使用局部内部类而不是用匿名内部类理由之一：需要不止一个该内部类对象

10.12 内部类标识符
