接口

9.1 抽象类和抽象接口
抽象方法：仅有声明没有方法体 abstract void f()
抽象类：具有一个或一个以上抽象方法的类

9.2 接口
interface：产生一个完全抽象的类，不提供具体实现。允许确定方法名、参数列表、返回类型
interface：public/包访问权限
实现接口，在接口中被定义的方法必须是public的

9.3 完全解耦
设计模式
策略：创建一个能够根据所传递的参数对象的不同而具有不同行为的方法
适配器：接受所拥有的所有接口，并产生需要的接口

9.4 java中的多重继承
extends只能继承一个类，implements可以实现多个接口（用逗号隔开即可）
使用接口核心原因：1. 为了能够向上转型为多个基类型 2.防止客户端程序员创建该类的对象，并确保这仅仅是建立一个接口

9.5 通过继承来扩展接口
接口可以继承多个类extends后面基类逗号分隔
组合接口时的名字冲突：尽量避免

9.6 适配接口
Radom rand = new Radom(47)
Random r1 = new Random(47);
Random r2 = new Random(47);
Random r3 = new Random(100);
for(int i=0;i<3;i++) {
	System.out.println(r1.nextInt(200) + " "+ r2.nextInt(200) + " "+ r3.nextInt(200));
}
output:
58 58 115
155 155 50
93 93 74

9.7 接口中的域
9.7.1 初始化接口中的域
接口中的域不能是“空final”，但是可以被非常量表达式初始化，即为static，第一次加载时被初始化

9.8 嵌套接口
接口可以嵌套在类或者其他接口中
接口语法：public/包访问 可视性
接口可以被实现为private，他只是一种方式，可以强制接口中的方法不要添加任何类型信息（不能向上转型）

9.9 接口与工厂
设计模式
工厂方法：在工厂对象上调用的是创建方法，而该工厂对象将生成接口的某个实现的对象

9.10 总结
恰当的原则应该是优先选择类而不是接口。从类开始，如果接口的必需型变得非常明确，那么就进行重构。